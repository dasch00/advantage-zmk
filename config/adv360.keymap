/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        mo_sl: mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_SL";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&sl>;
        };

        mo_to: mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TO";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&to>;
        };

        mo_ctrl_e: mo_ctrl_e {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_CTRL_E";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&macro_ctrl_e>;
        };
    };

    macros {
        macro_dollar: macro_dollar {
            compatible = "zmk,behavior-macro";
            label = "macro_dollar";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR &to 1>;
        };

        macro_p13: macro_p13 {
            compatible = "zmk,behavior-macro";
            label = "macro_p13";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(G))) &to 0>;
        };

        macro_array_open: macro_array_open {
            compatible = "zmk,behavior-macro";
            label = "macro_array_open";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp SINGLE_QUOTE>;
        };

        macro_shift_enter: macro_shift_enter {
            compatible = "zmk,behavior-macro";
            label = "macro_shift_enter";
            #binding-cells = <0>;
            bindings = <&kp LS(ENTER) &to 1>;
        };

        macro_jump_to_char: macro_jump_to_char {
            compatible = "zmk,behavior-macro";
            label = "macro_jump_to_char";
            #binding-cells = <0>;
            bindings = <&kp LC(SEMICOLON)>;
        };

        macro_shift_to_1: macro_shift_to_1 {
            compatible = "zmk,behavior-macro";
            label = "macro_shift_to_1";
            #binding-cells = <0>;
            bindings = <&to 1 &sl 12>;
        };

        macro_p12: macro_p12 {
            compatible = "zmk,behavior-macro";
            label = "macro_p12";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LS(E))) &to 0>;
        };

        macro_win_tab: macro_win_tab {
            compatible = "zmk,behavior-macro";
            label = "macro_win_tab";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(TAB)) &to 0>;
        };

        macro_alt_enter: macro_alt_enter {
            compatible = "zmk,behavior-macro";
            label = "macro_alt_enter";
            #binding-cells = <0>;
            bindings = <&kp LA(ENTER) &kp ESC>;
        };

        macro_win_l: macro_win_l {
            compatible = "zmk,behavior-macro";
            label = "macro_win_l";
            #binding-cells = <0>;
            bindings = <&kp LG(L) &to 0>;
        };

        macro_p11: macro_p11 {
            compatible = "zmk,behavior-macro";
            label = "macro_p11";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LS(Z))) &to 3>;
        };

        macro_p10: macro_p10 {
            compatible = "zmk,behavior-macro";
            label = "macro_p10";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(A))) &to 3>;
        };

        macro_enter_to_0: macro_enter_to_0 {
            compatible = "zmk,behavior-macro";
            label = "macro_enter_to_0";
            #binding-cells = <0>;
            bindings = <&kp ENTER &tog 12>;
        };

        macro_to_0_to_1: macro_to_0_to_1 {
            compatible = "zmk,behavior-macro";
            label = "macro_to_0_to_1";
            #binding-cells = <0>;
            bindings = <&to 1 &sl 11>;
        };

        macro_2colon: macro_2colon {
            compatible = "zmk,behavior-macro";
            label = "macro_2colon";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
        };

        macro_or: macro_or {
            compatible = "zmk,behavior-macro";
            label = "macro_or";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE>;
        };

        macro_not_equal: macro_not_equal {
            compatible = "zmk,behavior-macro";
            label = "macro_not_equal";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp EQUAL &kp EQUAL>;
        };

        macro_equal: macro_equal {
            compatible = "zmk,behavior-macro";
            label = "macro_equal";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EQUAL &kp SPACE>;
        };

        macro_toedit: macro_toedit {
            compatible = "zmk,behavior-macro";
            label = "macro_toedit";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(INSERT)))>;
        };

        macro_tonav: macro_tonav {
            compatible = "zmk,behavior-macro";
            label = "macro_tonav";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LS(INS))) &to 3>;
        };

        macro_double_amprsand: macro_double_amprsand {
            compatible = "zmk,behavior-macro";
            label = "macro_double_amprsand";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp AMPERSAND &kp AMPERSAND &kp SPACE>;
        };

        macro_alt_to_0: macro_alt_to_0 {
            compatible = "zmk,behavior-macro";
            label = "macro_alt_to_0";
            #binding-cells = <0>;
            bindings = <&sk LALT &sl 0>;
        };

        macro_ctrl_to_0: macro_ctrl_to_0 {
            compatible = "zmk,behavior-macro";
            label = "macro_ctrl_to_0";
            #binding-cells = <0>;
            bindings = <&sk LCTRL &sl 0>;
        };

        macro_triple_equal: macro_triple_equal {
            compatible = "zmk,behavior-macro";
            label = "macro_triple_equal";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL &kp EQUAL &kp SPACE>;
        };

        macro_ctrl_e: macro_ctrl_e {
            compatible = "zmk,behavior-macro";
            label = "macro_ctrl_e";
            #binding-cells = <0>;
            bindings = <&kp LC(E) &to 2>;
        };

        macro_dialog_escape: macro_dialog_escape {
            compatible = "zmk,behavior-macro";
            label = "macro_dialog_escape";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &to 3>;
        };

        macro_dialog_enter: macro_dialog_enter {
            compatible = "zmk,behavior-macro";
            label = "macro_dialog_enter";
            #binding-cells = <0>;
            bindings = <&kp ENTER &to 3>;
        };

        macro_esc_nav: macro_esc_nav {
            compatible = "zmk,behavior-macro";
            label = "macro_esc_nav";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &to 3>;
        };

        macro_ctrl_k: macro_ctrl_k {
            compatible = "zmk,behavior-macro";
            label = "macro_ctrl_k";
            #binding-cells = <0>;
            bindings = <&kp LC(K) &to 1>;
        };

        macro_ctrl_f: macro_ctrl_f {
            compatible = "zmk,behavior-macro";
            label = "macro_ctrl_f";
            #binding-cells = <0>;
            bindings = <&kp LC(F) &to 1>;
        };

        macro_p0: macro_p0 {
            compatible = "zmk,behavior-macro";
            label = "macro_p0";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LS(B))) &to 3>;
        };

        macro_p9: macro_p9 {
            compatible = "zmk,behavior-macro";
            label = "macro_p9";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(N4))) &to 0>;
        };

        macro_p8: macro_p8 {
            compatible = "zmk,behavior-macro";
            label = "macro_p8";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(W))) &to 3>;
        };

        macro_p7: macro_p7 {
            compatible = "zmk,behavior-macro";
            label = "macro_p7";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(R))) &to 0>;
        };

        macro_p6: macro_p6 {
            compatible = "zmk,behavior-macro";
            label = "macro_p6";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(F))) &to 0>;
        };

        macro_p5: macro_p5 {
            compatible = "zmk,behavior-macro";
            label = "macro_p5";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(D))) &to 3>;
        };

        macro_p4: macro_p4 {
            compatible = "zmk,behavior-macro";
            label = "macro_p4";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(S))) &to 3>;
        };

        macro_p3: macro_p3 {
            compatible = "zmk,behavior-macro";
            label = "macro_p3";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(N5))) &to 0>;
        };

        macro_p2: macro_p2 {
            compatible = "zmk,behavior-macro";
            label = "macro_p2";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(N2))) &to 0>;
        };

        macro_p1: macro_p1 {
            compatible = "zmk,behavior-macro";
            label = "macro_p1";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(N1))) &to 0>;
        };

        macro_fat_arrow: macro_fat_arrow {
            compatible = "zmk,behavior-macro";
            label = "macro_fat_arrow";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EQUAL &kp GREATER_THAN &kp SPACE>;
        };

        macro_select_line: macro_select_line {
            compatible = "zmk,behavior-macro";
            label = "macro_select_line";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp HOME &kp LS(END)>;
        };

        macro_extend_select: macro_extend_select {
            compatible = "zmk,behavior-macro";
            label = "macro_extend_select";
            #binding-cells = <0>;
            bindings = <&kp LC(W)>;
        };

        macro_scroll_down: macro_scroll_down {
            compatible = "zmk,behavior-macro";
            label = "macro_scroll_down";
            #binding-cells = <0>;
            bindings = <&kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW>;
        };

        macro_scroll_up: macro_scroll_up {
            compatible = "zmk,behavior-macro";
            label = "macro_scroll_up";
            #binding-cells = <0>;
            bindings = <&kp UP &kp UP &kp UP>;
        };

        macro_arrow: macro_arrow {
            compatible = "zmk,behavior-macro";
            label = "macro_arrow";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
        };

        macro_quotes: macro_quotes {
            compatible = "zmk,behavior-macro";
            label = "macro_quotes";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
        };

        macro_dquotes: macro_dquotes {
            compatible = "zmk,behavior-macro";
            label = "macro_dquotes";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT>;
        };

        macro_braces: macro_braces {
            compatible = "zmk,behavior-macro";
            label = "macro_braces";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        macro_parens: macro_parens {
            compatible = "zmk,behavior-macro";
            label = "macro_parens";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };

        macro_brackets: macro_brackets {
            compatible = "zmk,behavior-macro";
            label = "macro_brackets";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };

        macro_kinesis: macro_kinesis {
            compatible = "zmk,behavior-macro";
            label = "macro_kinesis";
            #binding-cells = <0>;
            bindings = <&kp LS(K) &kp I &kp N &kp E &kp S &kp I &kp S>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE       &kp LC(LS(NUMBER_1))  &sl 12       &sl 11              &kp TAB             &kp DELETE  &kp F12                                                                                      &mo 5        &kp TAB  &kp TAB             &sl 11              &sl 12             &kp LC(LS(NUMBER_2))  &kp RIGHT_BRACKET
&kp BACKSLASH   &kp Q                 &kp W        &kp E               &kp R               &kp T       &to 0                                                                                        &to 1        &kp Y    &kp U               &kp I               &kp O              &kp P                 &kp LEFT_BRACKET
&kp MINUS       &kp A                 &kp S        &kp D               &kp F               &kp G       &none        &lt 10 LC(TAB)   &lt 13 LA(TAB)             &macro_win_tab       &kp BACKSPACE  &none        &kp H    &kp J               &kp K               &kp L              &kp SEMI              &mt LSHFT SINGLE_QUOTE
&to 3           &kp Z                 &kp X        &kp C               &kp V               &kp B                                     &kp LS(LG(S))              &kp LG(D)                                        &kp N    &kp M               &kp COMMA           &kp DOT            &kp FSLH              &to 2
&lt 5 NUMBER_7  &lt 7 NUMBER_9        &mt LALT N5  &mt LSHFT NUMBER_1  &mt LCTRL NUMBER_3              &lt 8 SPACE  &mt LCTRL ENTER  &mt LEFT_GUI NUMBER_5      &mt RIGHT_GUI LG(L)  &mt LCTRL ESC  &lt 8 SPACE           &mt RCTRL NUMBER_2  &mt RSHFT NUMBER_0  &mt RALT NUMBER_4  &lt 7 NUMBER_8        &lt 5 NUMBER_6
            >;
        };

        layer_editor {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                          &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                          &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &mo_to 9 3  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_dialog {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                                                 &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                                                 &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans               &trans      &trans  &trans                &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                               &trans      &trans                                &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &macro_dialog_enter  &trans      &trans  &macro_dialog_escape  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_nav {
            bindings = <
&kp LC(TILDE)  &trans            &macro_shift_to_1  &macro_to_0_to_1  &kp LA(ENTER)   &kp LC(LS(F))        &trans                                                           &trans      &kp LS(LC(P))     &kp LS(F6)    &macro_to_0_to_1  &macro_shift_to_1  &trans        &trans
&trans         &kp LC(LA(L))     &kp LC(W)          &macro_dollar     &kp RIGHT       &macro_jump_to_char  &trans                                                           &trans      &kp LC(D)         &kp LEFT      &kp UP            &kp LC(BACKSPACE)  &kp LC(HOME)  &trans
&trans         &kp HOME          &kp LC(TAB)        &lt 4 LC(B)       &kp LS(ENTER)   &kp LC(LA(RIGHT))    &trans           &trans       &trans      &trans  &trans         &trans      &kp LA(LC(LEFT))  &kp LC(LEFT)  &kp DOWN          &kp LC(RIGHT)      &kp END       &trans
&trans         &kp LA(NUMBER_7)  &kp LS(DELETE)     &kp LC(INSERT)    &kp LS(INSERT)  &kp LC(LS(U))                                      &trans      &trans                             &kp LC(LS(Z))     &kp LC(Z)     &kp BACKSPACE     &kp LC(SLASH)      &kp LC(END)   &trans
&trans         &trans            &trans             &trans            &trans                               &mo_ctrl_e 10 0  &lt 9 ENTER  &trans      &trans  &lt 14 ESCAPE  &mo_to 8 1                    &trans        &trans            &trans             &trans        &trans
            >;
        };

        layer_subnav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans                &trans              &trans                 &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &kp LC(HOME)          &kp LC(LS(COMMA))   &kp LC(END)            &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp LC(LEFT)          &kp LC(LS(PERIOD))  &kp LC(RIGHT)          &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &kp LC(LEFT_BRACKET)  &trans              &kp LC(RIGHT_BRACKET)  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans                &trans              &trans                 &trans  &trans
            >;
        };

        layer_mod {
            bindings = <
&bt BT_CLR   &trans        &trans  &trans  &trans  &trans  &none                                                       &trans                  &none  &trans      &trans           &none       &bl BL_TOG    &bt BT_CLR
&bl BL_INC   &none         &none   &none   &none   &none   &bootloader                                                 &bootloader             &none  &none       &none            &none       &none         &none
&bl BL_DEC   &none         &none   &none   &none   &none   &rgb_ug RGB_MEFS_CMD 5  &trans  &trans      &trans  &trans  &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none            &none       &none         &none
&bootloader  &bt BT_SEL 0  &none   &none   &none   &none                                   &trans      &trans                                  &none  &bl BL_TOG  &rgb_ug RGB_TOG  &bl BL_INC  &bt BT_SEL 1  &rgb_ug RGB_MEFS_CMD 5
&none        &none         &none   &none   &trans          &trans                  &trans  &trans      &trans  &trans  &trans                         &none       &none            &none       &none         &none
            >;
        };

        layer_temp {
            bindings = <
&trans  &trans  &trans     &trans              &trans         &trans  &trans                                      &trans              &trans              &trans            &trans             &kp LA(LC(LS(J)))  &trans       &trans
&trans  &trans  &kp LC(W)  &macro_select_line  &kp LS(LC(W))  &trans  &trans                                      &trans              &kp LA(J)           &kp LC(LS(LEFT))  &kp LS(UP)         &kp LC(LS(RIGHT))  &trans       &trans
&trans  &trans  &kp LC(X)  &kp LC(C)           &kp LC(V)      &trans  &trans  &trans  &trans      &trans  &trans  &trans              &kp LS(HOME)        &kp LS(LEFT)      &kp LS(DOWN)       &kp LS(RIGHT)      &kp LS(END)  &trans
&trans  &trans  &trans     &trans              &trans         &trans                  &trans      &trans                              &kp LA(LS(INSERT))  &kp LC(LC(UP))    &kp LC(LA(COMMA))  &kp LC(LC(DOWN))   &trans       &trans
&trans  &trans  &trans     &trans              &trans                 &trans  &trans  &trans      &trans  &trans  &macro_shift_enter                      &trans            &trans             &trans             &trans       &trans
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2       &kp F3        &trans         &kp F5       &kp F6  &tog 1                                            &mo 3      &kp F7  &kp F8       &trans         &kp F10       &kp F11       &kp F12
&trans  &trans       &trans        &trans         &trans       &trans  &none                                             &none      &trans  &trans       &kp F11        &kp F12       &trans        &trans
&trans  &hm LGUI F1  &hm LCTRL F2  &hm LSHIFT F3  &hm LALT F4  &kp F5  &none   &trans  &trans      &sk LGUI  &sk LALT    &none      &kp F6  &hm LALT F7  &hm LSHIFT F8  &hm LCTRL F9  &hm LGUI F10  &trans
&trans  &trans       &trans        &trans         &trans       &trans                  &trans      &trans                           &trans  &trans       &trans         &trans        &trans        &trans
&trans  &trans       &trans        &trans         &trans               &tog 7  &to 2   &trans      &trans    &sk LSHIFT  &sk LCTRL          &trans       &trans         &trans        &trans        &trans
            >;
        };

        layer_apps {
            bindings = <
&kp LA(GRAVE)  &trans      &kp LS(ESCAPE)  &kp LA(ENTER)  &kp K_APP  &trans      &trans                                                        &trans      &kp LC(LA(N7))  &kp LC(TAB)     &kp LS(LC(ENTER))  &kp LC(LS(LA(T)))  &trans         &trans
&trans         &kp LC(T)   &macro_p8       &macro_p12     &macro_p7  &macro_p9   &trans                                                        &trans      &kp LC(S)       &kp DELETE      &kp UP_ARROW       &kp BACKSPACE      &trans         &trans
&trans         &macro_p10  &macro_p4       &macro_p5      &macro_p6  &macro_p13  &trans     &trans         &trans      &trans  &kp LC(ESCAPE)  &trans      &trans          &kp LEFT_ARROW  &kp DOWN_ARROW     &kp RIGHT_ARROW    &kp END        &trans
&trans         &macro_p11  &kp LC(X)       &kp LC(C)      &kp LC(V)  &macro_p0                             &trans      &trans                              &kp LC(LA(Z))   &kp LC(Z)       &trans             &kp LC(LS(Z))      &kp LC(SLASH)  &trans
&none          &none       &macro_p1       &macro_p2      &macro_p3              &kp ENTER  &kp LC(ENTER)  &trans      &trans  &kp ESCAPE      &kp LSHIFT                  &none           &none              &none              &none          &none
            >;
        };

        layer_motions {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                              &trans      &kp LC(LA(N7))  &kp LC(TAB)     &kp LS(LC(ENTER))  &kp LC(LS(LA(T)))  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                              &trans      &kp LC(S)       &kp DELETE      &kp UP_ARROW       &kp BACKSPACE      &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LC(ESCAPE)  &trans      &trans          &kp LEFT_ARROW  &kp DOWN_ARROW     &kp RIGHT_ARROW    &kp END        &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                              &kp LC(LA(Z))   &kp LC(Z)       &trans             &kp LC(LS(Z))      &kp LC(SLASH)  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &kp ESCAPE      &kp LSHIFT                  &none           &none              &none              &none          &none
            >;
        };

        layer_selection {
            bindings = <
&kp LA(GRAVE)  &trans      &kp LS(ESCAPE)  &kp LA(ENTER)  &kp LA(ENTER)  &kp LC(LS(F))  &trans                                                &trans              &trans              &trans          &trans        &kp LA(LC(LS(J)))  &trans       &trans
&trans         &kp LC(T)   &macro_p8       &macro_p12     &macro_p7      &macro_p9      &trans                                                &trans              &kp LA(J)           &kp LC(W)       &kp LS(UP)    &kp LC(LA(LS(O)))  &trans       &trans
&trans         &macro_p10  &macro_p4       &macro_p5      &macro_p6      &macro_p13     &trans     &trans         &trans      &trans  &trans  &trans              &kp LS(HOME)        &kp LS(LEFT)    &kp LS(DOWN)  &kp LS(RIGHT)      &kp LS(END)  &trans
&trans         &macro_p11  &kp LC(X)       &kp LC(C)      &kp LC(V)      &macro_p0                                &trans      &trans                              &kp LA(LS(INSERT))  &kp LC(LC(UP))  &kp F3        &kp LC(LC(DOWN))   &trans       &trans
&none          &none       &macro_p1       &macro_p2      &macro_p3                     &kp ENTER  &kp LC(ENTER)  &trans      &trans  &trans  &macro_shift_enter                      &trans          &trans        &trans             &trans       &trans
            >;
        };

        layer_symbols {
            bindings = <
&trans  &trans           &kp UNDER          &kp MINUS             &trans             &trans    &trans                                                &trans     &none   &macro_double_amprsand  &macro_not_equal  &macro_triple_equal  &macro_or          &none
&trans  &kp CARET        &macro_fat_arrow   &macro_dollar         &kp LEFT_BRACE     &trans    &trans                                                &trans     &none   &kp RIGHT_BRACE         &kp TAB           &macro_fat_arrow     &kp GRAVE          &none
&trans  &kp EXCLAMATION  &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS  &kp SINGLE_QUOTE   &trans    &trans     &trans    &trans      &trans  &trans       &trans     &none   &kp RIGHT_PARENTHESIS   &kp EQUAL         &macro_arrow         &kp LC(LS(ENTER))  &none
&trans  &kp HASH         &kp RIGHT_BRACKET  &kp PIPE              &kp DOUBLE_QUOTES  &kp PLUS                       &trans      &trans                          &kp AT  &kp RIGHT_BRACKET       &kp STAR          &macro_array_open    &kp BACKSLASH      &none
&trans  &trans           &trans             &trans                &trans                       &kp UNDER  &kp STAR  &trans      &trans  &kp PERCENT  &kp MINUS          &trans                  &trans            &trans               &trans             &trans
            >;
        };

        layer_shift {
            bindings = <
&kp LS(GRAVE)      &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)  &tog 1                                                        &mo 3          &kp LS(N6)  &kp LS(N7)  &kp LS(N8)     &kp LS(N9)   &kp LS(NUMBER_0)  &kp LS(MINUS)
&kp LS(MINUS)      &kp LS(Q)   &kp LS(W)   &kp LS(E)   &kp LS(R)   &kp LS(T)   &none                                                         &none          &kp LS(Y)   &kp LS(U)   &kp LS(I)      &kp LS(O)    &kp LS(P)         &kp LS(LEFT_BRACKET)
&kp LS(BACKSLASH)  &kp LS(A)   &kp LS(S)   &kp LS(D)   &kp LS(F)   &kp LS(G)   &none      &kp LCTRL      &kp LALT      &kp LGUI   &kp RCTRL  &none          &kp LS(H)   &kp LS(J)   &kp LS(K)      &kp LS(L)    &kp LS(SEMI)      &kp LS(SINGLE_QUOTE)
&kp LSHFT          &kp LS(Z)   &kp LS(X)   &kp LS(C)   &kp LS(V)   &kp LS(B)                             &kp HOME      &kp PG_UP                            &kp LS(N)   &kp LS(M)   &kp LS(COMMA)  &kp LS(DOT)  &kp LS(SLASH)     &kp RSHFT
&mo 7              &kp GRAVE   &sk LALT    &sk LCTRL   &sk LGUI                &kp ENTER  &kp LA(ENTER)  &sk LALT      &sk LALT   &none      &sk LS(ENTER)              &sl 7       &sk LCTRL      &sk LALT     &kp RBKT          &mo 7
            >;
        };

        layer_number_pad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans        &trans  &kp PERCENT   &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans        &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9          &kp COMMA              &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &none  &none      &none  &kp MINUS  &trans        &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6          &kp DOT                &trans
&trans  &trans  &trans  &trans  &trans  &trans                 &none      &none                           &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3          &kp SLASH              &trans
&trans  &trans  &trans  &trans  &trans          &none   &none  &none      &none  &kp PLUS   &kp NUMBER_0          &trans        &trans        &trans                &trans                 &trans
            >;
        };

        layer_control {
            bindings = <
&kp GRAVE      &kp EXCLAMATION  &kp K_APP   &kp LA(ENTER)  &kp LC(LA(LS(T)))  &macro_fat_arrow  &tog 1                                                                    &mo 3   &kp DOUBLE_QUOTES  &kp LC(LA(N7))  &trans         &trans       &kp LC(LEFT_BRACKET)  &kp LC(RIGHT_BRACKET)
&kp LC(MINUS)  &kp LC(Q)        &kp LC(F4)  &kp LC(LS(E))  &kp LC(R)          &kp LC(T)         &none                                                                     &none   &kp LC(Y)          &kp LC(U)       &kp LC(I)      &kp LC(O)    &kp LC(P)             &kp LC(BACKSLASH)
&kp LSHFT      &kp LC(A)        &kp LC(S)   &kp LC(D)      &macro_ctrl_f      &kp LC(G)         &none          &kp LS(LC(ESCAPE))  &kp LC(LA(LS(T)))      &trans  &trans  &none   &kp LC(H)          &kp LC(J)       &macro_ctrl_k  &kp LC(L)    &kp LC(SEMICOLON)     &mt LSHFT SINGLE_QUOTE
&kp LSHFT      &kp LC(Z)        &kp LC(X)   &kp LC(C)      &kp LC(V)          &kp LC(B)                                            &trans                 &trans                  &kp LC(N)          &kp LC(M)       &kp LC(COMMA)  &kp LC(DOT)  &kp LC(SLASH)         &kp RSHFT
&mo 2          &sk LALT         &kp LCTRL   &kp LSHIFT     &sk LGUI                             &kp LC(ENTER)  &to 1               &trans                 &trans  &trans  &trans                     &sl 2           &sk LSHFT      &sk LCTRL    &sk LALT              &mo 2
            >;
        };
    };
};
